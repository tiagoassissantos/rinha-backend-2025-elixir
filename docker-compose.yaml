services:
  app1:
    image: elixir:1.18-alpine
    working_dir: /app
    volumes:
      - ./:/app
      - ${HOME}/.mix:/root/.mix:ro
    container_name: app1
    environment:
      - MIX_ENV=dev
      - PORT=4001
      - MIX_HOME=/root/.mix
      - HEX_OFFLINE=1
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=tasrinha_dev
    command: >-
      sh -lc "mix run --no-halt"
    expose:
      - "4001"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - appnet
      - payment-processor
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "122MB"

  app2:
    image: elixir:1.18-alpine
    working_dir: /app
    volumes:
      - ./:/app
      - ${HOME}/.mix:/root/.mix:ro
    container_name: app2
    environment:
      - MIX_ENV=dev
      - PORT=4002
      - MIX_HOME=/root/.mix
      - HEX_OFFLINE=1
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=tasrinha_dev
    command: >-
      sh -lc "mix run --no-halt"
    expose:
      - "4002"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - appnet
      - payment-processor
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "122MB"

  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      - app1
      - app2
    ports:
      - "9999:80"
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - appnet
      - payment-processor
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "26MB"

  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tasrinha_dev
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - appnet
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: "80MB"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    depends_on:
      - app1
      - app2
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - appnet
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "128MB"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./infra/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./infra/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_DEFAULT_THEME=dark
    networks:
      - appnet
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "256MB"

networks:
  payment-processor:
    external: true
  appnet:
    driver: bridge

volumes:
  pgdata:
    driver: local
  prometheus_data:
    driver: local
