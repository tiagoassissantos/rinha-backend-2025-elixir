services:
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    platform: ${APP_PLATFORM:-linux/amd64}
    container_name: app1
    environment:
      - PORT=4001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=tasrinha_dev
      # OpenTelemetry: export traces/metrics to Collector
      - OTEL_SERVICE_NAME=tas_rinhaback_3ed
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    expose:
      - "4001"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - appnet
      - payment-processor
    depends_on:
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "132MB"

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    platform: ${APP_PLATFORM:-linux/amd64}
    container_name: app2
    environment:
      - PORT=4002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=tasrinha_dev
      # OpenTelemetry: export traces/metrics to Collector
      - OTEL_SERVICE_NAME=tas_rinhaback_3ed
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    expose:
      - "4002"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - appnet
      - payment-processor
    depends_on:
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "132MB"

  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      - app1
      - app2
    ports:
      - "9999:80"
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - appnet
      - payment-processor
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "26MB"

  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tasrinha_dev
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - appnet
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: "60MB"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    depends_on:
      - app1
      - app2
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - appnet

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    depends_on:
      - tempo
    volumes:
      - ./infra/otel-collector.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8889:8889"   # Prometheus scrape endpoint
    command: ["--config=/etc/otelcol/config.yaml"]
    networks:
      - appnet

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./infra/tempo.yaml:/etc/tempo.yaml:ro
    ports:
      - "3200:3200"   # Tempo HTTP API (Grafana datasource)
      # OTLP ingest (Collector -> Tempo); no host mapping required
      # - "4317:4317" # OTLP gRPC
      # - "4318:4318" # OTLP HTTP
    networks:
      - appnet

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
      - tempo
      - loki
    ports:
      - "3000:3000"
    volumes:
      - ./infra/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./infra/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_USERS_DEFAULT_THEME=dark
      # Enable anonymous access (no authentication in home lab)
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_DISABLE_SIGNOUT_MENU=true
      # Quiet noisy auth warnings for anonymous (optional)
      - GF_LOG_FILTERS=authn.service:info
    networks:
      - appnet

  loki:
    image: grafana/loki:3.5.5
    container_name: loki
    command: ["-config.file=/etc/loki/config.yml"]
    ports:
      - "3100:3100"
    volumes:
      - ./infra/loki-config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    networks:
      - appnet

  promtail:
    image: grafana/promtail:3.5.5
    container_name: promtail
    depends_on:
      - loki
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./infra/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - promtail_positions:/tmp
    networks:
      - appnet

networks:
  payment-processor:
    external: true
  appnet:
    driver: bridge

volumes:
  pgdata:
    driver: local
  loki_data:
    driver: local
  promtail_positions:
    driver: local
  prometheus_data:
    driver: local
